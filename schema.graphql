type Account @entity {
  "Account address"
  id: ID!
  wallet: String!
  balance: BigInt!
  historicalBalances: [HistoricalBalance!] @derivedFrom(field: "account")
}

type HistoricalBalance @entity {
  id: ID!
  account: Account!
  balance: BigInt!
  timestamp: BigInt!
}


# v1 only for now

type Collection @entity {
    id: String!
    name: String
    max: BigInt!
    issuer: String!
    symbol: String!
    rmrkVersion: String!
    metadata: String
#     data???
#     properties: IProperties
}

# type IProperties @entity {
#     key: String!
#     value: IAttribute!
# }
# 
# type IAttribute @entity {
#     _mutation: Mutation
#     type: String!
#     value: Any!
# }
# 
# type Mutation @entity {
#     allowed: Boolean!
#     with: With
# }
# 
# enum OP_TYPES {
#     TYPE1
#     TYPE2
# }
# 
# type With @entity {
#     op_type: OP_TYPES!
#     condition: String
# }
# 

# TODO make Nftv2 and Collectionv2 because they have different formats
type Nft @entity {
    collection: String!
    symbol: String
    transferable: BigInt!
    rmrkVersion: String!
    sn: String
    metadata: String
}

type Call @jsonField {
  call: String!
  value: String!
  caller: String!
}

type Rmrk @jsonField {
  block: BigInt!
  caller: String!
  interaction_type: String!
  rmrkVersion: String!
  remark: String!
  extra_ex: [Call!]
}

type RmrkEntity @entity {
    rmrk: Rmrk!
}
