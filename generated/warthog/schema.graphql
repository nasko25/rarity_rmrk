type Account implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  wallet: String!
  balance: BigInt!
  historicalBalances: [HistoricalBalance!]!
}

type AccountConnection {
  totalCount: Int!
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

input AccountCreateInput {
  wallet: String!
  balance: String!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

enum AccountOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  wallet_ASC
  wallet_DESC
  balance_ASC
  balance_DESC
}

input AccountUpdateInput {
  wallet: String
  balance: String
}

input AccountWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  wallet_eq: String
  wallet_contains: String
  wallet_startsWith: String
  wallet_endsWith: String
  wallet_in: [String!]
  balance_eq: BigInt
  balance_gt: BigInt
  balance_gte: BigInt
  balance_lt: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  historicalBalances_none: HistoricalBalanceWhereInput
  historicalBalances_some: HistoricalBalanceWhereInput
  historicalBalances_every: HistoricalBalanceWhereInput
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  id: ID!
}

interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

type Collection implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  name: String
  max: BigInt!
  issuer: String!
  symbol: String!
  rmrkVersion: String!
  metadata: String
}

type CollectionConnection {
  totalCount: Int!
  edges: [CollectionEdge!]!
  pageInfo: PageInfo!
}

input CollectionCreateInput {
  name: String
  max: String!
  issuer: String!
  symbol: String!
  rmrkVersion: String!
  metadata: String
}

type CollectionEdge {
  node: Collection!
  cursor: String!
}

enum CollectionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  max_ASC
  max_DESC
  issuer_ASC
  issuer_DESC
  symbol_ASC
  symbol_DESC
  rmrkVersion_ASC
  rmrkVersion_DESC
  metadata_ASC
  metadata_DESC
}

input CollectionUpdateInput {
  name: String
  max: String
  issuer: String
  symbol: String
  rmrkVersion: String
  metadata: String
}

input CollectionWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  max_eq: BigInt
  max_gt: BigInt
  max_gte: BigInt
  max_lt: BigInt
  max_lte: BigInt
  max_in: [BigInt!]
  issuer_eq: String
  issuer_contains: String
  issuer_startsWith: String
  issuer_endsWith: String
  issuer_in: [String!]
  symbol_eq: String
  symbol_contains: String
  symbol_startsWith: String
  symbol_endsWith: String
  symbol_in: [String!]
  rmrkVersion_eq: String
  rmrkVersion_contains: String
  rmrkVersion_startsWith: String
  rmrkVersion_endsWith: String
  rmrkVersion_in: [String!]
  metadata_eq: String
  metadata_contains: String
  metadata_startsWith: String
  metadata_endsWith: String
  metadata_in: [String!]
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
}

input CollectionWhereUniqueInput {
  id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Hello {
  greeting: String!
}

type HistoricalBalance implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  account: Account!
  accountId: String!
  balance: BigInt!
  timestamp: BigInt!
}

type HistoricalBalanceConnection {
  totalCount: Int!
  edges: [HistoricalBalanceEdge!]!
  pageInfo: PageInfo!
}

input HistoricalBalanceCreateInput {
  account: ID!
  balance: String!
  timestamp: String!
}

type HistoricalBalanceEdge {
  node: HistoricalBalance!
  cursor: String!
}

enum HistoricalBalanceOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  account_ASC
  account_DESC
  balance_ASC
  balance_DESC
  timestamp_ASC
  timestamp_DESC
}

input HistoricalBalanceUpdateInput {
  account: ID
  balance: String
  timestamp: String
}

input HistoricalBalanceWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  balance_eq: BigInt
  balance_gt: BigInt
  balance_gte: BigInt
  balance_lt: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  account: AccountWhereInput
  AND: [HistoricalBalanceWhereInput!]
  OR: [HistoricalBalanceWhereInput!]
}

input HistoricalBalanceWhereUniqueInput {
  id: ID!
}

type Nft implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  collection: String!
  symbol: String!
  transferable: BigInt!
  rmrkVersion: String!
  sn: String
  metadata: String
}

type NftConnection {
  totalCount: Int!
  edges: [NftEdge!]!
  pageInfo: PageInfo!
}

input NftCreateInput {
  collection: String!
  symbol: String!
  transferable: String!
  rmrkVersion: String!
  sn: String
  metadata: String
}

type NftEdge {
  node: Nft!
  cursor: String!
}

enum NftOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  collection_ASC
  collection_DESC
  symbol_ASC
  symbol_DESC
  transferable_ASC
  transferable_DESC
  rmrkVersion_ASC
  rmrkVersion_DESC
  sn_ASC
  sn_DESC
  metadata_ASC
  metadata_DESC
}

input NftUpdateInput {
  collection: String
  symbol: String
  transferable: String
  rmrkVersion: String
  sn: String
  metadata: String
}

input NftWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  collection_eq: String
  collection_contains: String
  collection_startsWith: String
  collection_endsWith: String
  collection_in: [String!]
  symbol_eq: String
  symbol_contains: String
  symbol_startsWith: String
  symbol_endsWith: String
  symbol_in: [String!]
  transferable_eq: BigInt
  transferable_gt: BigInt
  transferable_gte: BigInt
  transferable_lt: BigInt
  transferable_lte: BigInt
  transferable_in: [BigInt!]
  rmrkVersion_eq: String
  rmrkVersion_contains: String
  rmrkVersion_startsWith: String
  rmrkVersion_endsWith: String
  rmrkVersion_in: [String!]
  sn_eq: String
  sn_contains: String
  sn_startsWith: String
  sn_endsWith: String
  sn_in: [String!]
  metadata_eq: String
  metadata_contains: String
  metadata_startsWith: String
  metadata_endsWith: String
  metadata_in: [String!]
  AND: [NftWhereInput!]
  OR: [NftWhereInput!]
}

input NftWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Query {
  accounts(offset: Int, limit: Int = 50, where: AccountWhereInput, orderBy: [AccountOrderByInput!]): [Account!]!
  accountByUniqueInput(where: AccountWhereUniqueInput!): Account
  accountsConnection(first: Int, after: String, last: Int, before: String, where: AccountWhereInput, orderBy: [AccountOrderByInput!]): AccountConnection!
  collections(offset: Int, limit: Int = 50, where: CollectionWhereInput, orderBy: [CollectionOrderByInput!]): [Collection!]!
  collectionByUniqueInput(where: CollectionWhereUniqueInput!): Collection
  collectionsConnection(first: Int, after: String, last: Int, before: String, where: CollectionWhereInput, orderBy: [CollectionOrderByInput!]): CollectionConnection!
  historicalBalances(offset: Int, limit: Int = 50, where: HistoricalBalanceWhereInput, orderBy: [HistoricalBalanceOrderByInput!]): [HistoricalBalance!]!
  historicalBalanceByUniqueInput(where: HistoricalBalanceWhereUniqueInput!): HistoricalBalance
  historicalBalancesConnection(first: Int, after: String, last: Int, before: String, where: HistoricalBalanceWhereInput, orderBy: [HistoricalBalanceOrderByInput!]): HistoricalBalanceConnection!
  nfts(offset: Int, limit: Int = 50, where: NftWhereInput, orderBy: [NftOrderByInput!]): [Nft!]!
  nftByUniqueInput(where: NftWhereUniqueInput!): Nft
  nftsConnection(first: Int, after: String, last: Int, before: String, where: NftWhereInput, orderBy: [NftOrderByInput!]): NftConnection!
  hello: Hello!
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}
